#spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/test





# configuring the HikariCP  to maintain a minimum of 6  inactive(unused) database connections.
spring.datasource.hikari.minimumIdle=6

#configures the HikariCP  to allow a maximum of 20 active (in-use) database connections.
spring.datasource.hikari.maximumPoolSize=20

sp

#sets HikariCP to remove idle database connections if they remain unused for more than 30,000 milliseconds (30 seconds)
spring.datasource.hikari.idleTimeout=30000

# sets a unique name for the connection pool
spring.datasource.hikari.poolName=MyHikariCP

# HikariCP  wait up to 20,000 milliseconds (20 seconds) for a new database connection before throwing an exception.
spring.datasource.hikari.connection-timeout: 20000

#HikariCP close and remove database connections from the pool if they exceed a maximum lifetime of 120,000 milliseconds (120 seconds).
spring.datasource.hikari.max-lifetime: 120000

# means that each database operation is automatically committed without any explicit command
spring.datasource.hikari.auto-commit: true

#it stops creating new database connections for a certain period.
spring.datasource.hikari.allow-pool-suspension=false

#it will set the catalog  name which is coming from the database
spring.datasource.hikari.catalog=test

# It will acquire a new connection from the pool
spring.datasource.hikari.connection-init-sql=SELECT 1;

#HikariCP will use to test the health of a database connection
spring.datasource.hikari.connection-test-query=SELECT 1;

#HikariCP allows internal queries to run on the same connection as user queries
spring.datasource.hikari.isolate-internal-queries=false

# If a connection is held beyond this limit, it may indicate a problem, and HikariCP will log it as a potential connection leak
spring.datasource.hikari.leak-detection-threshold=60000

# sets a 5-second limit means checking if a database connection is healthy or it will create problem.
spring.datasource.hikari.validation-timeout=5000

#Sets the default schema name for database connections
spring.datasource.hikari.schema=test


#helps maintain data consistency by making sure that transactions only see changes committed by other transactions.
spring.datasource.hikari.transaction-isolation=TRANSACTION_READ_COMMITTED

#in this case  connection is allowed to perform both read and write operation if true then only perform read operation
spring.datasource.hikari.read-only=false

# checking if a database connection is still healthy
spring.datasource.hikari.keepalive-time=600000

#useful if you don't want to monitor HikariCP operations through JMX(Java Management Extensions) in your application
spring.datasource.hikari.register-mbeans=false

# Specifies the JDBC driver class name for MySQL database connections.
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver

#sets a timeout of 40,000 milliseconds (40 seconds) for the HikariCP connection pool initialization
spring.datasource.hikari.initialization-fail-timeout=40000

#sets the database username to "your_username" for HikariCP connections
spring.datasource.hikari.username=root

#HikariCP to enable caching of prepared statements in the connection pool.
spring.datasource.hikari.dataSource.cachePrepStmts=true

#HikariCP to set the size of the prepared statement cache to 250
spring.datasource.hikari.dataSource.prepStmtCacheSize=250

#HikariCP to set the maximum SQL query length (in characters)
spring.datasource.hikari.dataSource.prepStmtCacheSqlLimit=2048

# configures HikariCP to use server-side prepared statements
spring.datasource.hikari.dataSource.useServerPrepStmts=true

#configures HikariCP to allow the use of local session state with the connection.
spring.datasource.hikari.dataSource.useLocalSessionState=true



















